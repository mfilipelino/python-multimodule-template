# Pre-commit hooks configuration for multi-module Python project
# See https://pre-commit.com for more information

repos:
  # Built-in hooks for basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        description: Trim trailing whitespace
      - id: end-of-file-fixer
        description: Ensure files end with newline
      - id: check-yaml
        description: Check YAML file syntax
      - id: check-toml
        description: Check TOML file syntax
      - id: check-json
        description: Check JSON file syntax
      - id: check-merge-conflict
        description: Check for merge conflict markers
      - id: check-case-conflict
        description: Check for case conflicts in filenames
      - id: check-added-large-files
        description: Prevent large files from being committed
        args: ['--maxkb=1000']
      - id: debug-statements
        description: Check for debugger imports and breakpoints
      - id: name-tests-test
        description: Ensure test files are named correctly
        args: ['--pytest-test-first']

  # Python import sorting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.2
    hooks:
      - id: ruff
        description: Run Ruff linter
        args: [--fix, --exit-non-zero-on-fix]
        types_or: [python, pyi]
      - id: ruff-format
        description: Run Ruff formatter
        types_or: [python, pyi]

  # Code formatting with Black
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        description: Format Python code with Black
        language_version: python3
        types: [python]

  # Security scanning with Bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.5
    hooks:
      - id: bandit
        description: Run Bandit security scanner
        args: ['-c', 'pyproject.toml']
        types: [python]
        exclude: ^(tests/|modules/.*/tests/)

  # Type checking with Pyright (using local installation)
  - repo: local
    hooks:
      - id: pyright
        name: pyright
        description: Run Pyright type checker
        entry: bash -c 'if command -v pyright &> /dev/null; then pyright modules/*/src/; else echo "Pyright not found, skipping type check"; fi'
        language: system
        types: [python]
        pass_filenames: false
        always_run: true

  # Conventional commits validation
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.6.0
    hooks:
      - id: conventional-pre-commit
        description: Validate conventional commit messages
        stages: [commit-msg]

  # Documentation checks
  - repo: https://github.com/pycqa/doc8
    rev: v1.1.2
    hooks:
      - id: doc8
        description: Check documentation formatting
        files: \.rst$
        args: ['--max-line-length=88']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        description: Check shell scripts with ShellCheck
        types: [shell]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        description: Format YAML, JSON, and Markdown files
        types_or: [yaml, json, markdown]
        exclude: ^(.*\.md|.*\.json)$  # Exclude markdown and some JSON files
        args: ['--write']

  # Local custom hooks
  - repo: local
    hooks:
      # Run tests for changed modules
      - id: pytest-changed-modules
        name: pytest-changed-modules
        description: Run tests for changed modules only
        entry: .github/scripts/run-tests-for-changes.sh
        language: script
        types: [python]
        pass_filenames: false
        always_run: true

      # Dependency vulnerability check
      - id: safety-check
        name: safety-check
        description: Check for known security vulnerabilities
        entry: bash -c 'if command -v safety &> /dev/null; then safety check; else echo "Safety not installed, skipping vulnerability check"; fi'
        language: system
        pass_filenames: false
        always_run: true

      # Check for secrets in code
      - id: secrets-check
        name: secrets-check
        description: Check for potential secrets in code
        entry: .github/scripts/check-secrets.sh
        language: script
        types: [text]

      # Validate module dependencies
      - id: validate-dependencies
        name: validate-dependencies
        description: Validate module dependency graph
        entry: python .github/scripts/discover-dependencies.py list
        language: system
        types: [python]
        files: pyproject\.toml$
        pass_filenames: false

# Configuration for specific hooks
ci:
  autofix_commit_msg: |
    ðŸ¤– auto-fix pre-commit hooks

    [pre-commit.ci] auto fixes from pre-commit.com hooks
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: 'ðŸ¤– [pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pyright, pytest-changed-modules, safety-check]  # Skip expensive checks in CI
  submodules: false